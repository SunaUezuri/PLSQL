set serveroutput on
set VERIFY off

DROP TABLE ALUNO CASCADE CONSTRAINTS;
CREATE TABLE ALUNO (RA NUMBER(1), NOME VARCHAR2(20));
INSERT INTO ALUNO VALUES (1, 'Wesley');
INSERT INTO ALUNO VALUES (2, 'Jane');
INSERT INTO ALUNO VALUES (3, 'Nicolas');

DECLARE
    V_RA ALUNO.RA%TYPE := &Ra;
    V_NOME ALUNO.NOME%TYPE;

BEGIN
    SELECT NOME INTO V_NOME FROM ALUNO WHERE RA = V_RA;
    DBMS_OUTPUT.PUT_LINE(V_RA||' - '||V_NOME);
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Não há nehum aluno com este RA');
        WHEN TOO_MANY_ROWS THEN
            DBMS_OUTPUT.PUT_LINE('Há mais de um aluno com este RA');
END;

--Personalizada

DECLARE
    V_CONTA NUMBER(2);
    TURMA_CHEIA EXCEPTION;
    
BEGIN
    SELECT COUNT(RA) INTO V_CONTA FROM ALUNO;
    
    IF V_CONTA = 5 THEN
        RAISE TURMA_CHEIA;
    ELSE
        INSERT INTO ALUNO VALUES(6, 'Miguel');
    END IF;
    EXCEPTION
        WHEN TURMA_CHEIA THEN
            DBMS_OUTPUT.PUT_LINE('Não foi possível incluir: turma cheia');
END;

SELECT * FROM ALUNO;

-- Atividade

DROP TABLE CLIENTE CASCADE CONSTRAINTS;
DROP TABLE MOVIMENTACAO CASCADE CONSTRAINTS;
DROP TABLE TIPO_MOV CASCADE CONSTRAINTS;

CREATE TABLE Cliente (
    id_clie NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100)
);

CREATE TABLE Tipo_Mov (
    id_tipo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descricao VARCHAR2(100)
);

CREATE TABLE Movimentacao (
    id_mov NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dt_mov DATE,
    valor_mov NUMBER(10, 2),
    id_clie NUMBER,
    id_tipo NUMBER,
    CONSTRAINT fk_mov_cliente FOREIGN KEY (id_clie) REFERENCES Cliente(id_clie),
    CONSTRAINT fk_mov_tipo FOREIGN KEY (id_tipo) REFERENCES Tipo_Mov(id_tipo)
);

DECLARE
    CURSOR cur_clientes IS
        SELECT id_clie, nome FROM Cliente;

    v_id_mov NUMBER := 1;
    v_data_mov DATE := SYSDATE;
    v_valor NUMBER;

    v_dummy NUMBER;

    e_cliente_nao_encontrado EXCEPTION;
    e_tipo_nao_encontrado EXCEPTION;

BEGIN
    INSERT INTO Cliente VALUES (3, 'João');
    INSERT INTO Cliente VALUES (4, 'Maria');
    
    /*INSERT INTO Tipo_Mov VALUES (1, 'Crédito');
    INSERT INTO Tipo_Mov VALUES (2, 'Débito');*/

    FOR mov IN (
        SELECT 1 AS id_clie, 1 AS id_tipo, 1000 AS valor FROM dual UNION ALL
        SELECT 1, 2, -200 FROM dual UNION ALL
        SELECT 2, 1, 1500 FROM dual UNION ALL
        SELECT 2, 2, -300 FROM dual
    ) LOOP
        BEGIN
            -- Verifica se o cliente existe
            SELECT COUNT(*) INTO v_dummy FROM Cliente WHERE id_clie = mov.id_clie;
            IF v_dummy = 0 THEN
                RAISE e_cliente_nao_encontrado;
            END IF;

            -- Verifica se o tipo de movimentação existe
            SELECT COUNT(*) INTO v_dummy FROM Tipo_Mov WHERE id_tipo = mov.id_tipo;
            IF v_dummy = 0 THEN
                RAISE e_tipo_nao_encontrado;
            END IF;

            INSERT INTO Movimentacao (id_mov, dt_mov, valor_mov, id_clie, id_tipo)
            VALUES (v_id_mov, v_data_mov, mov.valor, mov.id_clie, mov.id_tipo);

            v_id_mov := v_id_mov + 1;

        EXCEPTION
            WHEN e_cliente_nao_encontrado THEN
                DBMS_OUTPUT.PUT_LINE('Erro: Cliente ID ' || mov.id_clie || ' não encontrado.');
            WHEN e_tipo_nao_encontrado THEN
                DBMS_OUTPUT.PUT_LINE('Erro: Tipo de movimentação ID ' || mov.id_tipo || ' não encontrado.');
            WHEN VALUE_ERROR THEN
                DBMS_OUTPUT.PUT_LINE('Erro: Por favor insira um valor válido');
        END;
    END LOOP;

    FOR cli IN cur_clientes LOOP
        DBMS_OUTPUT.PUT_LINE(CHR(10) || '--- Movimentações de ' || cli.nome || ' ---');
        FOR mov IN (
            SELECT M.dt_mov, M.valor_mov, T.descricao
            FROM Movimentacao M
            JOIN Tipo_Mov T ON M.id_tipo = T.id_tipo
            WHERE M.id_clie = cli.id_clie
            ORDER BY M.dt_mov
        ) LOOP
            DBMS_OUTPUT.PUT_LINE(mov.dt_mov || ' - ' || mov.descricao || ' - R$ ' || mov.valor_mov);
        END LOOP;
    END LOOP;

    DBMS_OUTPUT.PUT_LINE(CHR(10) || '--- Saldos Calculados ---');
    FOR cli IN cur_clientes LOOP
        SELECT NVL(SUM(valor_mov), 0) INTO v_valor
        FROM Movimentacao
        WHERE id_clie = cli.id_clie;

        DBMS_OUTPUT.PUT_LINE(cli.nome || ': R$ ' || v_valor);
    END LOOP;
    
END;

